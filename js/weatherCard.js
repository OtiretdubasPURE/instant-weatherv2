// Fonction pour cr√©er les cartes m√©t√©o
function createWeatherCards(weatherDataArray, selectedOptions, communeInfo) {
  // Vider la section m√©t√©o
  const weatherSection = document.getElementById("weatherInformation");
  weatherSection.innerHTML = "";
  
  // Cr√©er un conteneur pour toutes les cartes
  const cardsContainer = document.createElement("div");
  cardsContainer.classList.add("weather-cards-container");
  
  // Cr√©er une carte pour chaque jour
  weatherDataArray.forEach((dayData, index) => {
    const card = createSingleWeatherCard(dayData, selectedOptions, communeInfo, index);
    cardsContainer.appendChild(card);
  });
  
  // Ajouter le conteneur √† la section m√©t√©o
  weatherSection.appendChild(cardsContainer);
  
  // Ajouter un bouton de retour
  addReloadButton();
  
  // G√©rer la visibilit√© des sections
  const requestSection = document.getElementById("cityForm");
  requestSection.style.display = "none";
  weatherSection.style.display = "block";
}

// Fonction pour cr√©er une seule carte m√©t√©o
function createSingleWeatherCard(dayData, selectedOptions, communeInfo, dayIndex) {
  const card = document.createElement("div");
  card.classList.add("weather-card");
  
  // Titre de la carte avec la date
  const cardTitle = document.createElement("h3");
  const date = new Date(dayData.forecast.datetime);
  const dateString = date.toLocaleDateString('fr-FR', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });
  
  if (dayIndex === 0) {
    cardTitle.textContent = `Aujourd'hui - ${dateString}`;
  } else {
    cardTitle.textContent = dateString;
  }
  cardTitle.classList.add("card-title");
  card.appendChild(cardTitle);
  
  // Nom de la commune
  const communeName = document.createElement("p");
  communeName.textContent = `üìç ${communeInfo.nom}`;
  communeName.classList.add("commune-name");
  card.appendChild(communeName);
  
  // Conteneur pour les informations m√©t√©o principales
  const mainWeatherInfo = document.createElement("div");
  mainWeatherInfo.classList.add("main-weather-info");
  
  // Ic√¥ne m√©t√©o bas√©e sur le code weather
  const weatherIcon = getWeatherIcon(dayData.forecast.weather);
  const iconElement = document.createElement("div");
  iconElement.innerHTML = weatherIcon;
  iconElement.classList.add("weather-icon");
  mainWeatherInfo.appendChild(iconElement);
  
  // Conteneur pour les temp√©ratures
  const tempContainer = document.createElement("div");
  tempContainer.classList.add("temperature-container");
  
  const tempMin = document.createElement("div");
  tempMin.innerHTML = `üå°Ô∏è Min: <strong>${dayData.forecast.tmin}¬∞C</strong>`;
  tempMin.classList.add("temp-min");
  
  const tempMax = document.createElement("div");
  tempMax.innerHTML = `üå°Ô∏è Max: <strong>${dayData.forecast.tmax}¬∞C</strong>`;
  tempMax.classList.add("temp-max");
  
  tempContainer.appendChild(tempMin);
  tempContainer.appendChild(tempMax);
  mainWeatherInfo.appendChild(tempContainer);
  
  card.appendChild(mainWeatherInfo);
  
  // Informations m√©t√©o de base
  const baseInfo = document.createElement("div");
  baseInfo.classList.add("base-weather-info");
  
  const rainProba = document.createElement("div");
  rainProba.innerHTML = `‚òî Probabilit√© de pluie: <strong>${dayData.forecast.probarain}%</strong>`;
  baseInfo.appendChild(rainProba);
  
  const sunHours = document.createElement("div");
  sunHours.innerHTML = `‚òÄÔ∏è Ensoleillement: <strong>${displayHours(dayData.forecast.sun_hours)}</strong>`;
  baseInfo.appendChild(sunHours);
  
  card.appendChild(baseInfo);
  
  // Informations suppl√©mentaires (si s√©lectionn√©es)
  const additionalInfo = document.createElement("div");
  additionalInfo.classList.add("additional-info");
  
  if (selectedOptions.showLatitude && communeInfo.latitude) {
    const latitude = document.createElement("div");
    latitude.innerHTML = `üåç Latitude: <strong>${parseFloat(communeInfo.latitude).toFixed(4)}¬∞</strong>`;
    additionalInfo.appendChild(latitude);
  }
  
  if (selectedOptions.showLongitude && communeInfo.longitude) {
    const longitude = document.createElement("div");
    longitude.innerHTML = `üåç Longitude: <strong>${parseFloat(communeInfo.longitude).toFixed(4)}¬∞</strong>`;
    additionalInfo.appendChild(longitude);
  }
  
  if (selectedOptions.showRainfall) {
    const rainfall = document.createElement("div");
    rainfall.innerHTML = `üåßÔ∏è Cumul de pluie: <strong>${dayData.forecast.rr1 || 0} mm</strong>`;
    additionalInfo.appendChild(rainfall);
  }
  
  if (selectedOptions.showWind) {
    const wind = document.createElement("div");
    wind.innerHTML = `üí® Vent moyen: <strong>${dayData.forecast.wind10m || 0} km/h</strong>`;
    additionalInfo.appendChild(wind);
  }
  
  if (selectedOptions.showWindDirection) {
    const windDirection = document.createElement("div");
    const directionText = getWindDirectionText(dayData.forecast.dirwind10m);
    windDirection.innerHTML = `üß≠ Direction du vent: <strong>${dayData.forecast.dirwind10m || 0}¬∞ (${directionText})</strong>`;
    additionalInfo.appendChild(windDirection);
  }
  
  if (additionalInfo.children.length > 0) {
    const additionalTitle = document.createElement("h4");
    additionalTitle.textContent = "Informations suppl√©mentaires";
    additionalTitle.classList.add("additional-title");
    card.appendChild(additionalTitle);
    card.appendChild(additionalInfo);
  }
  
  return card;
}

// Fonction pour obtenir l'ic√¥ne m√©t√©o selon le code
function getWeatherIcon(weatherCode) {
  const weatherIcons = {
    0: "‚òÄÔ∏è", // Soleil
    1: "üå§Ô∏è", // Peu nuageux
    2: "‚õÖ", // Ciel voil√©
    3: "‚òÅÔ∏è", // Nuageux
    4: "‚òÅÔ∏è", // Tr√®s nuageux
    5: "üå´Ô∏è", // Brouillard
    6: "üå¶Ô∏è", // Pluie faible
    7: "üåßÔ∏è", // Pluie mod√©r√©e
    8: "üåßÔ∏è", // Pluie forte
    9: "üå¶Ô∏è", // Pluie faible intermittente
    10: "üåßÔ∏è", // Pluie mod√©r√©e intermittente
    11: "üåßÔ∏è", // Pluie forte intermittente
    12: "üå®Ô∏è", // Neige faible
    13: "‚ùÑÔ∏è", // Neige mod√©r√©e
    14: "‚ùÑÔ∏è", // Neige forte
    15: "üå®Ô∏è", // Neige faible intermittente
    16: "‚ùÑÔ∏è", // Neige mod√©r√©e intermittente
    17: "‚ùÑÔ∏è", // Neige forte intermittente
    18: "üåßÔ∏è", // Pluie et neige m√™l√©es faibles
    19: "üåßÔ∏è", // Pluie et neige m√™l√©es mod√©r√©es
    20: "üåßÔ∏è", // Pluie et neige m√™l√©es fortes
    21: "‚õàÔ∏è", // Orage faible
    22: "‚õàÔ∏è", // Orage mod√©r√©
    23: "‚õàÔ∏è", // Orage fort
    24: "‚õàÔ∏è", // Orage faible avec gr√™le
    25: "‚õàÔ∏è", // Orage mod√©r√© avec gr√™le
    26: "‚õàÔ∏è", // Orage fort avec gr√™le
    27: "üå®Ô∏è", // Chutes de neige faibles
    28: "‚ùÑÔ∏è", // Chutes de neige mod√©r√©es
    29: "‚ùÑÔ∏è"  // Chutes de neige fortes
  };
  
  return weatherIcons[weatherCode] || "üå§Ô∏è";
}

// Fonction pour convertir la direction du vent en texte
function getWindDirectionText(degrees) {
  if (!degrees && degrees !== 0) return "N/A";
  
  const directions = [
    "Nord", "Nord-Nord-Est", "Nord-Est", "Est-Nord-Est",
    "Est", "Est-Sud-Est", "Sud-Est", "Sud-Sud-Est",
    "Sud", "Sud-Sud-Ouest", "Sud-Ouest", "Ouest-Sud-Ouest",
    "Ouest", "Ouest-Nord-Ouest", "Nord-Ouest", "Nord-Nord-Ouest"
  ];
  
  const index = Math.round(degrees / 22.5) % 16;
  return directions[index];
}

// Fonction pour afficher les heures correctement
function displayHours(sunHours) {
  if (!sunHours && sunHours !== 0) return "N/A";
  return sunHours + (sunHours > 1 ? " heures" : " heure");
}

// Fonction pour ajouter le bouton de rechargement
function addReloadButton() {
  // Supprimer le bouton existant s'il y en a un
  const existingButton = document.getElementById("reloadButton");
  if (existingButton) {
    existingButton.remove();
  }
  
  const reloadButton = document.createElement("button");
  reloadButton.id = "reloadButton";
  reloadButton.textContent = "üîÑ Nouvelle recherche";
  reloadButton.classList.add("reloadButton");
  
  // Ajouter un listener sur le bouton
  reloadButton.addEventListener("click", function () {
    location.reload();
  });
  
  // Ajouter le bouton apr√®s la section m√©t√©o
  const weatherSection = document.getElementById("weatherInformation");
  weatherSection.appendChild(reloadButton);
}

// Fonction de compatibilit√© pour l'ancienne version (si n√©cessaire)
function createCard(data) {
  console.warn("createCard() est obsol√®te, utilisez createWeatherCards() √† la place");
  const selectedOptions = {
    showLatitude: false,
    showLongitude: false,
    showRainfall: false,
    showWind: false,
    showWindDirection: false
  };
  const communeInfo = { nom: "Commune inconnue", latitude: null, longitude: null };
  createWeatherCards([data], selectedOptions, communeInfo);
}